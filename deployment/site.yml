---
# See deployment/README.md for usage

- name: Install Podman Docker
  hosts: podman
  tags:
    - podman
  tasks:
    # Unprivileged user account requires linger to be enabled so podman will continue to run
    # after the session has been terminated upon logout
    # The command: loginctl show-user <unprivileged user>
    # Should show: Linger=yes
    # When enabled we should have the file "/var/lib/systemd/linger/<unprivileged user>
    - name: Determine linger state for Reductionist user
      ansible.builtin.stat:
        path: "/var/lib/systemd/linger/{{ ansible_facts['user_id'] }}"
      register: systemd_linger_path_for_reductionist
    - name: Enable linger for unprivileged Reductionist user
      ansible.builtin.command: loginctl enable-linger {{ ansible_facts['user_id'] }}
      changed_when: true
      when: not systemd_linger_path_for_reductionist.stat.exists
      become: true

    - name: Ensure podman docker is installed on Ubuntu
      when: ansible_facts["os_family"] | lower == "debian"
      ansible.builtin.package:
        name:
          - passt
          - podman-docker
        state: present
        update_cache: true
      become: true

    - name: Ensure podman docker is installed on RedHat
      when: ansible_facts["os_family"] | lower == "redhat"
      ansible.builtin.package:
        name:
          - passt
          - podman-docker
        state: present
        update_cache: true
      become: true

    - name: Ensure other system packages are present
      ansible.builtin.package:
        name:
          - git
          - python3-pip
        state: present
      become: true

- name: Deploy step CA
  hosts: step-ca
  tags:
    - step-ca
  tasks:
    - name: Assert that there is only one CA server
      ansible.builtin.assert:
        that:
          groups['step-ca'] | length == 1

    - name: Ensure step-ca container is running
      containers.podman.podman_container:
        name: step-ca
        env:
          DOCKER_STEPCA_INIT_NAME: "Smallstep"
          DOCKER_STEPCA_INIT_DNS_NAMES: "localhost,{{ ansible_facts.nodename }},{{ ansible_facts.default_ipv4.address }}"
          DOCKER_STEPCA_INIT_REMOTE_MANAGEMENT: "true"
          DOCKER_STEPCA_INIT_ADDRESS: ":9999"
        image: docker.io/smallstep/step-ca
        network: host
        volumes:
          - "step:/home/step"

    - name: Check health
      ansible.builtin.uri:
        url: https://localhost:9999/health
        validate_certs: false
      register: health_result
      until:
        - health_result.status == 200
        - health_result.json.status == "ok"

    - name: Set step config path
      set_fact:
        step_config_path: "{{ ansible_env.HOME }}/step"

    - name: Stat provisioner password file
      ansible.builtin.stat:
        path: "{{ step_config_path }}/provisioner-password"
      register: provisioner_password_stat

    - name: Get provisioner password
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          docker logs step-ca 2>&1 | awk '/Your CA administrative password is/ { print $7 }'
        executable: /bin/bash
      register: provisioner_password
      changed_when: false
      when: not provisioner_password_stat.stat.exists

    - name: Create path for storing step password
      ansible.builtin.file:
        path: "{{ step_config_path }}"
        state: directory
        mode: "0700"
      when: not provisioner_password_stat.stat.exists

    - name: Assert provisioner password found
      ansible.builtin.assert:
        that: provisioner_password.stdout | length > 0
      when: not provisioner_password_stat.stat.exists

    - name: Write provisioner password
      ansible.builtin.copy:
        content: "{{ provisioner_password.stdout }}"
        dest: "{{ step_config_path }}/provisioner-password"
        mode: "0600"
      when: not provisioner_password_stat.stat.exists

    - name: Get root CA certificate
      ansible.builtin.command: docker exec step-ca step ca root
      changed_when: false
      register: step_ca_root

    - name: Save root CA certificate to localhost
      ansible.builtin.copy:
        content: "{{ step_ca_root.stdout }}"
        dest: "{{ step_ca_root_cert_local_path }}"
        mode: "0600"
      delegate_to: localhost

- name: Install step CLI
  hosts: step
  tags:
    - step
  tasks:
    - name: Ensure step Deb is installed
      when: ansible_facts["os_family"] | lower == "debian"
      ansible.builtin.package:
        deb: "https://dl.smallstep.com/gh-release/cli/docs-cli-install/v0.24.4/step-cli_0.24.4_amd64.deb"
        state: present
        update_cache: true
      become: true

    - name: Ensure step RPM is installed
      when: ansible_facts["os_family"] | lower == "redhat"
      ansible.builtin.package:
        name: "https://dl.smallstep.com/gh-release/cli/docs-ca-install/v0.24.4/step-cli_0.24.4_amd64.rpm"
        # FIXME: We see the following error without this:
        # Failed to validate GPG signature for step-cli-0.24.4-1.x86_64:
        # Package step-cli_0.24.4_amd643z16ickc.rpm is not signed
        disable_gpg_check: true
        state: present
      become: true

    - name: Test step
      ansible.builtin.command: step certificate inspect https://smallstep.com
      changed_when: false

    - name: Set step config path
      set_fact:
        step_config_path: "{{ ansible_env.HOME }}/step"

    - name: Regenerate step config if requested
      ansible.builtin.file:
        path: "{{ step_config_path }}/{{ item }}"
        state: absent
      loop:
        - certs
        - config
      when: step_config_regenerate | bool

    - name: Check whether step has been bootstrapped
      ansible.builtin.stat:
        path: "{{ step_config_path }}/config/defaults.json"
      register: step_stat

    - name: Get CA fingerprint # noqa: run-once[task]
      ansible.builtin.command: docker exec step-ca step certificate fingerprint certs/root_ca.crt
      register: ca_fingerprint
      changed_when: false
      delegate_to: "{{ groups['step-ca'][0] }}"
      run_once: true

    # Running an unprivileged step will prompt to overwrite the CA unless we --force
    # This writes config under the unprivileged deployment user's HOME directory
    # and previously (when we ran privileged) would be coupled with --install
    # to write the CA to the system truststore
    - name: Bootstrap CA
      ansible.builtin.command: >
        step ca bootstrap
        --ca-url https://{{ hostvars[groups['step-ca'][0]].ansible_facts.default_ipv4.address }}:9999
        --fingerprint {{ ca_fingerprint.stdout }} --force
      changed_when: true
      when: not step_stat.stat.exists

    - name: Determine step path when executed unprivileged
      ansible.builtin.command: step path
      changed_when: false
      register: reductionist_step_path

    # Install CA from unprivileged deployment user's config to system truststore
    - name: Install root certificate to system
      ansible.builtin.shell: step certificate install {{ reductionist_step_path.stdout }}/certs/root_ca.crt
      changed_when: false
      become: true
      when: not step_stat.stat.exists

    #
    # The following were originally Reductionist tasks
    #

    - name: Check whether certificate exists
      ansible.builtin.stat:
        path: "{{ reductionist_remote_certs_path }}/cert.pem"
      register: reductionist_cert_stat

    - name: Ensure remote certificate path exists
      ansible.builtin.file:
        path: "{{ reductionist_remote_certs_path }}"
        state: directory
        mode: "0711"

    - name: Generate a step token
      ansible.builtin.command: >-
        step ca token
        --provisioner-password-file {{ step_config_path }}/provisioner-password
        {{ reductionist_host }}
      delegate_to: "{{ groups['step-ca'][0] }}"
      changed_when: false
      register: reductionist_step_token

    - name: Generate an initial certificate
      ansible.builtin.command: >-
        step ca certificate
        --token {{ reductionist_step_token.stdout }}
        --not-after {{ reductionist_cert_not_after }}
        --force
        {{ reductionist_host }}
        {{ reductionist_remote_certs_path }}/cert.pem
        {{ reductionist_remote_certs_path }}/key.pem
      changed_when: true
      when: not reductionist_cert_stat.stat.exists

    - name: Ensure certificate renewal systemd units exist
      tags: privileged
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "/etc/systemd/system/{{ item }}"
        mode: "0600"
      loop:
        - reductionist-cert-renewer.service
        - reductionist-cert-renewer.timer
      become: true

    - name: Ensure certificate renewal systemd timer is enabled
      tags: privileged
      ansible.builtin.service:
        name: reductionist-cert-renewer.timer
        enabled: true
      become: true

- name: Deploy Minio
  hosts: minio
  tags:
    - minio
  tasks:
    - name: Assert that there is only one Minio server
      ansible.builtin.assert:
        that:
          groups['minio'] | length == 1

    - name: Ensure minio container is running
      containers.podman.podman_container:
        name: minio-server
        command: server data --console-address :9001
        image: docker.io/minio/minio
        delete_volumes: true
        network: host
        volumes: /data

    - name: Wait for minio object storage to start
      ansible.builtin.uri:
        url: http://localhost:9001
      until: result is success
      register: result

- name: Gather facts for Prometheus
  hosts:
    - haproxy
    - reductionist
    - "!prometheus"
  tags:
    - prometheus
  gather_facts: true

- name: Deploy Prometheus
  hosts: prometheus
  tags:
    - prometheus
  tasks:
    - name: Assert that there is only one Prometheus server
      ansible.builtin.assert:
        that:
          groups['prometheus'] | length == 1

    - name: Ensure non-privileged user's prometheus directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/prometheus"
        state: directory
        mode: "0755"

    - name: Ensure CA certificate is copied
      ansible.builtin.copy:
        src: "{{ prometheus_cacert }}"
        dest: "{{ ansible_env.HOME }}/prometheus/cacert.pem"
        mode: "0644"
      register: prometheus_cacert

    - name: Ensure prometheus.yml is templated
      ansible.builtin.template:
        src: prometheus.yml.j2
        dest: "{{ ansible_env.HOME }}/prometheus/prometheus.yml"
        mode: "0644"
      register: prometheus_yml

    - name: Ensure prometheus container is running
      containers.podman.podman_container:
        name: prometheus
        privileged: true # Rocky 9 SELinux prevents visibility of the host volumes
        image: docker.io/prom/prometheus
        network: host
        restart: "{{ prometheus_yml is changed or prometheus_cacert is changed }}"
        volumes:
          - "{{ ansible_env.HOME }}/prometheus:/etc/prometheus:ro"
          - "prometheus:/prometheus"
      become: false

- name: Deploy Jaeger
  hosts: jaeger
  tags:
    - jaeger
  tasks:
    - name: Assert that there is only one Jaeger server
      ansible.builtin.assert:
        that:
          - groups['jaeger'] | length == 1

    - name: Ensure jaeger container is running
      containers.podman.podman_container:
        name: jaeger
        env:
          COLLECTOR_ZIPKIN_HTTP_PORT: "9411"
        image: docker.io/jaegertracing/all-in-one:1.6
        network: host

- name: Gather facts for Reductionist
  hosts:
    - haproxy
    - jaeger
    - "!reductionist"
  tags:
    - reductionist
  gather_facts: true

- name: Deploy Reductionist
  hosts: reductionist
  tags:
    - reductionist
  tasks:
    - name: Clone reductionist repo
      ansible.builtin.git:
        repo: "{{ reductionist_src_url }}"
        dest: "{{ ansible_env.HOME }}/reductionist-rs"
        version: "{{ reductionist_src_version }}"
      when: reductionist_build_image | bool

    - name: Ensure reductionist image is built
      containers.podman.podman_image:
        name: "{{ reductionist_image }}"
        tag: "{{ reductionist_tag }}"
        path: "{{ ansible_env.HOME }}/reductionist-rs"
      when: reductionist_build_image | bool

    - name: Ensure reductionist container is running
      containers.podman.podman_container:
        name: "{{ reductionist_name }}"
        privileged: true # Rocky 9 SELinux prevents visibility of the volume's certs otherwise
        env: "{{ reductionist_env }}"
        image: "{{ reductionist_image }}:{{ reductionist_tag }}"
        network: "{{ reductionist_networks }}"
        volumes: "{{ reductionist_volumes }}"
        restart: true  # Load new certificates. TODO: Hot reload

- name: Gather facts for HAProxy
  hosts:
    - reductionist
    - "!haproxy"
  tags:
    - haproxy
  gather_facts: true

- name: Deploy HAProxy
  hosts: haproxy
  tags:
    - haproxy
  tasks:
    # Currently we are not deploying any failover mechanism such as keepalived,
    # so limit to one HAProxy server.
    - name: Assert that there is only one HAProxy server
      ansible.builtin.assert:
        that:
          groups['haproxy'] | length == 1

    - name: Wait for reductionist backends to be accessible from HAProxy host
      ansible.builtin.uri:
        url: "https://{{ hostvars[item].ansible_facts.default_ipv4.address }}:8081/.well-known/reductionist-schema"
        # The certificates are only valid for the HAProxy frontend address (reductionist_host).
        validate_certs: false
      until: result is success
      register: result
      loop: "{{ query('inventory_hostnames', 'reductionist') }}"

    - name: Ensure non-privileged user's haproxy directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/haproxy"
        state: directory
        mode: "0755"

    - name: Ensure haproxy.cfg is templated
      ansible.builtin.template:
        src: haproxy.cfg.j2
        dest: "{{ ansible_env.HOME }}/haproxy/haproxy.cfg"
        mode: "0644"
      register: haproxy_cfg

    - name: Ensure haproxy container is running
      containers.podman.podman_container:
        name: haproxy
        privileged: true # Rocky 9 SELinux prevents visibility of the host volumes
        image: docker.io/haproxy:2.8
        network: host
        restart: "{{ haproxy_cfg is changed }}"
        volumes:
          - "{{ ansible_env.HOME }}/haproxy:/usr/local/etc/haproxy:ro"

    - name: Wait for reductionist server to be accessible via HAProxy
      ansible.builtin.uri:
        url: "https://{{ reductionist_host }}:8080/.well-known/reductionist-schema"
      until: result is success
      register: result
